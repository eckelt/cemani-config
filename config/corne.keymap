/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define HOST_OS 2
// activate macOS-mode for helper script
#undef OS_UNICODE_LEAD
#undef OS_UNICODE_TRAIL
#define OS_UNICODE_LEAD &macro_press &kp LALT  // <- macOS compose sequence (must be activated in system preferences)
#define OS_UNICODE_TRAIL &macro_release &kp LALT  // <- Releasing Left-Alt terminates unicode input on macOns
#include "../nodefree/helper.h"
#include "../nodefree/keypos_def/keypos_42keys.h"
#include "../nodefree/international_chars/german.dtsi"

#define ___ &trans
#define MEH LS(LC(LALT))
#define HYP LS(LC(LA(LGUI)))

#define def 0
#define sym 1
#define num 2
#define nav 3
#define stn 4
#define neo 5

&mt {
    tapping-term-ms = <180>;
    flavor = "balanced";
};
&lt {
    tapping-term-ms = < 200>;
    flavor = "balanced";
};
&sk {
    release-after-ms = <800>;
    quick-release;
};

// tap: backspace | shift + tap: delete
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

ZMK_BEHAVIOR(dot_comma, mod_morph,
    bindings = <&kp DOT>, <&kp COMMA>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

&soft_off {
    split-peripheral-off-on-press;
};

ZMK_COMBO(esc, &kp ESC, LT4 LT3, ALL, 30)
ZMK_COMBO(glo1, &kp GLOBE, LH2 LH1, ALL, 40)
ZMK_COMBO(glo2, &kp GLOBE, RH2 RH1, ALL, 40)
ZMK_COMBO(hyp, &kp HYP, RH0 RH1, ALL, 120)

ZMK_COMBO(tognav, &tog nav, RM0 RM1 RM2, ALL, 50)
ZMK_COMBO(tognum, &tog num, RT1 RT2 RT3, ALL, 50)
ZMK_COMBO(togstno, &tog stn, RB2 RB3 RB4, ALL, 50)
ZMK_COMBO(togneo, &tog neo, LB2 LB3 LB4, ALL, 50)

ZMK_COMBO(power1, &kp C_POWER, LT0 LT1 LT2, ALL, 50)
ZMK_COMBO(power2, &kp K_POWER, RT0 RT1 RT2, ALL, 50)
ZMK_COMBO(kb_power_1, &soft_off, LT4 LT3 LT2, ALL, 50)
ZMK_COMBO(kb_power_2, &soft_off, RT4 RT3 RT2, ALL, 50)

ZMK_COMBO(capsw, &caps_word, LH2 RH2, ALL, 50)

ZMK_COMBO(eursym, &kp RA(RS(2)), LT2 LM2, ALL, 50)

/ {
    macros {
        undo: undo {
            label = "undo";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp Z>
                , <&macro_release &kp RGUI>
                ;
        };
        ae_lc: ae_lc {
            label = "ae_lc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            // tap-ms = <10>;
            bindings
                = <&macro_tap &kp RA(U)>
                , <&macro_tap &kp A>
                ;
        };
        ae_uc: ae_uc {
            label = "ae_uc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            // tap-ms = <10>;
            bindings
                = <&macro_tap &kp RA(U)>
                , <&macro_tap &kp LS(A)>
                ;
        };
        euro_sign: euro_sign {
            label = "euro_sign";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LA(LS(2))>
                ;
        };
        bt_disc_all: bt_disc_all {
            label = "bt_disc_all";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &bt BT_DISC 0>
                , <&macro_press &bt BT_DISC 1>
                , <&macro_press &bt BT_DISC 2>
                , <&macro_press &bt BT_DISC 3>
                , <&macro_press &bt BT_DISC 4>
                ;
        };
    };

        behaviors {
            mod_ae: mod_ae {
                compatible = "zmk,behavior-mod-morph";
                label = "Ae";
                #binding-cells = <0>;
                bindings = <&ae_lc>, <&ae_uc>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            o_uml: o_uml {
                compatible = "zmk,behavior-mod-morph";
                label = "O umlaut";
                #binding-cells = <0>;
                bindings = <&kp O>, <&de_oe>;
                mods = <(MOD_LALT|MOD_RALT)>;
            };
            lt_bspc: layer_tap_bspc_del {
                compatible = "zmk,behavior-hold-tap";
                label = "LAYER_TAP_BACKSPACE_DELETE";
                #binding-cells = <2>;
                bindings = <&mo>, <&bs_del>;
                tapping-term-ms = <200>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "Base";
// -----------ESC---------------------------------------------------------------------------
// |    |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |    |
// |    |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    |
// |    |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |    |
//                   |     | SFT | SPC |   | ENT | SFT |     |
                        bindings = <
   ___  &kp Q    &kp W       &kp E       &kp R       &kp T         &kp Y  &kp U       &kp I       &kp O        &kp P      ___
   ___  &kp A    &mt LCTRL S &mt LALT D  &mt LGUI F  &kp G         &kp H  &mt RGUI J  &mt RALT K  &mt RCTRL L  &kp SEMI   ___
   ___  &kp Z    &kp X       &kp C       &kp V       &kp B         &kp N  &kp M       &kp COMMA   &kp DOT      &kp FSLH   ___
                      &sk LSHFT  &lt num TAB  &lt nav SPACE       &mt MEH RET  &lt_bspc sym 0  &sk RSHFT
                        >;
                };

                raise_layer {
                        label = "Sym";
// -----------------------------------------------------------------------------------------
// |    |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  (  |  )  |  `  |    |
// |    | Br+ |Vol+ |Prev |Play |Next |   |  '  |  "  |  [  |  ]  |  \  |    |
// |    | Br- |Vol- |Mute |     |     |   |  _  |  *  |  {  |  }  | "|" |    |
//                    |     |     | SPC |   | ENT |     |     |
                        bindings = <
   ___  &kp EXCL   &kp AT        &kp HASH    &kp DLLR  &kp PRCNT     &kp CARET  &kp AMPS  &kp LPAR  &kp RPAR  &kp GRAVE  ___
   ___  ___        &kp TILDE     &kp GRAVE   &kp SQT   &kp DQT       &kp MINUS  &kp UNDER   &kp LBKT  &kp RBKT  &kp BSLH   ___
   ___  &kp GLOBE  &kp &euro_sign    &kp FSLH    &kp PIPE  &kp BSLH      &kp PLUS  &kp EQUAL  &kp LBRC  &kp RBRC  &kp STAR   ___
                                                      ___  ___  ___     ___  ___  ___
                        >;
                };

                num_layer {
                        label = "NumPad";
// -----------------------------------------------------------------------------------------
// |    \ F1 | F2  | F3  | F4  |    |     |  *  |  7  |  8  |  9  |  +  |    |
// |    | F5 | F6  | F7  | F8  |    |     |  /  |  4  |  5  |  6  |  -  |    |
// |    | F9 | F10 | F11 | F12 |    |     |  :  |  1  |  2  |  3  | . , |    |
//                 |     |     |     |   | ENT | BCKS |  0  |
                        bindings = <
   ___  &kp F1        &kp F2        &kp F3       &kp F4       &kp &ae_lc        &kp STAR   &kp N7       &kp N8       &kp N9        &kp PLUS         ___
   ___  &mt LSHFT F5  &mt LCTRL F6  &mt LALT F7  &mt LGUI F8  &kp &mod_ae       &kp FSLH   &mt RGUI N4  &mt RALT N5  &mt RCTRL N6  &mt RSHFT MINUS  ___
   ___  &kp F9        &kp F10       &kp F11      &kp F12      &kp EQUAL         &kp COLON  &kp N1       &kp N2       &kp N3        &dot_comma       ___
                                                       ___  ___  ___              &kp RET   &bs_del   &mt RSHFT N0
                        >;
                };

                nav_layer {
                        label = "Nav";
// -----------------------------------------------------------------------------------------
// |      | BT1 | BT2 | BT3 | BT4 |  BTCLR |   |home |pg dn|pg up| end |     |     |
// |      |  üîÜ |  üîä | ‚èÆÔ∏è  | ‚èØÔ∏è  |   ‚è≠Ô∏è   |   |  <  |  v  |  ^  |  >  |     |     |
// |      | üîÖ  | üîä  | üîá  |     | togout |   |     |     |     |     |     |     |
//                       |     |     |     |   |     |     |     |
                        bindings = <
   ___  &bt BT_SEL 0        &bt BT_SEL 1        &bt BT_SEL 2      &bt BT_SEL 3    &bt BT_SEL 4        &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END    ___  ___
   ___  &mt LSHFT C_BRI_UP  &mt LCTRL C_VOL_UP  &mt LALT C_PREV   &mt LGUI C_PP   &kp C_NEXT          &kp LEFT   &kp DOWN       &kp UP       &kp RIGHT  ___  ___
   ___  &kp C_BRI_DN        &kp C_VOL_DN        &kp C_MUTE        &bt BT_CLR      &out OUT_TOG        ___        ___            ___          ___        ___  ___
                                                                    ___  &bt_disc_all  ___     ___  ___  ___
                        >;
                };

                steno_layer {
                        label = "Steno";
                        bindings = <
   ___  &kp Q    &kp W    &kp E    &kp R    &kp T         &kp U    &kp I    &kp O    &kp P     &kp LBKT   ___
   ___  &kp A    &kp S    &kp D    &kp F    &kp G         &kp J    &kp K    &kp L    &kp SEMI  &kp SQT    ___
   ___  ___      ___      ___      ___      ___         ___      ___      ___      ___      ___         ___
                             &kp MINUS   &kp C    &kp V         &kp N   &kp M   &kp EQUAL
                        >;
                };

                neo_layer {
                        label = "Noted (Neo)";
                        bindings = <
    ___    &kp Z      &kp U        &kp U       &kp A       &kp Q           &kp P       &kp B       &kp M       &kp L        &kp F   ___
    ___    &kp C      &mt LCTRL S  &mt LALT I  &mt LGUI E  &kp O           &kp D       &mt RGUI T  &mt RALT N  &mt RCTRL R  &kp H   ___
    ___    &kp SEMI   &kp V        &kp X       &kp J       &kp K           &kp W       &kp G       &kp COMMA   &kp DOT      &kp SLASH ___
                 &sk LSHFT  &lt num TAB  &lt nav SPACE       &mt MEH RET  &lt_bspc sym 0  &sk RSHFT
                        >;
                };
        };
};
