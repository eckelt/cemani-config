/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../nodefree/helper.h"
#include "../nodefree/keypos_def/keypos_42keys.h"

#define HOST_OS 2
// activate macOS-mode for helper script
#undef OS_UNICODE_LEAD
#undef OS_UNICODE_TRAIL
#define OS_UNICODE_LEAD &macro_press &kp LALT  // <- macOS compose sequence (must be activated in system preferences)
#define OS_UNICODE_TRAIL &macro_release &kp LALT  // <- Releasing Left-Alt terminates unicode input on macOns

#define ___ &trans
#define MEH LS(LC(LALT))
#define HYP LS(LC(LA(LGUI)))

#define neo 0
#define col 1
#define qwt 2
#define sym 3
#define num 4
#define nav 5
#define stn 6
#define met 7

&mt {
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    flavor = "tap-preferred";
};
&lt {
    tapping-term-ms = < 200>;
    flavor = "balanced";
};
&sk {
    release-after-ms = <800>;
    quick-release;
};

// tap: backspace | shift + tap: delete
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

ZMK_BEHAVIOR(dot_comma, mod_morph,
    bindings = <&kp DOT>, <&kp COMMA>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

ZMK_COMBO(esc, &kp ESC, LT4 LT3, ALL, 30)
ZMK_COMBO(studio, &studio_unlock, RT3 RT4, ALL, 30)
ZMK_COMBO(glo1, &kp GLOBE, LH2 LH1, ALL, 40)
ZMK_COMBO(glo2, &kp GLOBE, RH1 RH2, ALL, 40)
ZMK_COMBO(hyp, &kp HYP, RH0 RH1, ALL, 120)

// ZMK_COMBO(tognav, &tog nav, RM0 RM1 RM2, ALL, 50)
// ZMK_COMBO(tognum, &tog num, RT1 RT2 RT3, ALL, 50)
// ZMK_COMBO(togstno, &tog stn, RB2 RB3 RB4, ALL, 50)
ZMK_COMBO(togqwt, &tog qwt, LB2 LB3 LB4, ALL, 50)
ZMK_COMBO(togmet, &tog met, RB1 RB2 RB3, sym, 50)

ZMK_COMBO(power1, &kp C_POWER, LT0 LT1 LT2, ALL, 50)
ZMK_COMBO(power2, &kp K_POWER, RT0 RT1 RT2, ALL, 50)
ZMK_COMBO(kb_power_1, &soft_off, LT4 LM4 LB4, ALL, 50)
ZMK_COMBO(kb_power_2, &soft_off, RT4 RM4 RB4, ALL, 50)
ZMK_COMBO(btrst, &bt BT_CLR, LB0 LB1, nav, 50)

ZMK_COMBO(capsw, &caps_word, LH2 RH2, ALL, 50)

&soft_off {
    split-peripheral-off-on-press;
};

/ {
        behaviors {
            lt_bspc: layer_tap_bspc_del {
                compatible = "zmk,behavior-hold-tap";
                label = "LAYER_TAP_BACKSPACE_DELETE";
                #binding-cells = <2>;
                bindings = <&mo>, <&bs_del>;
                tapping-term-ms = <200>;
                quick-tap-ms = <200>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                neo_layer {
                        label = "ABC";
//  ╭─────────────────────┬─────────────────────╮
//  │  Z   Y   U   A   Q  |  P   B   M   L   F  │
//  │  C   S   I   E   O  │  D   T   N   R   H  │
//  │  V   X   J   ;   /  |  W   G   ,   .   K  │
//  ╰───────╮ Sft Tab Spc │ Ret Bck Sft ╭───────╯
//          ╰─────────────┴─────────────╯
                        bindings = <
    ___    &kp Z      &kp Y        &kp U       &kp A       &kp Q           &kp P       &kp B       &kp M       &kp L        &kp F   ___
    ___    &kp C      &mt LCTRL S  &mt LALT I  &mt LGUI E  &kp O           &kp D       &mt RGUI T  &mt RALT N  &mt RCTRL R  &kp H   ___
    ___    &kp V      &kp X        &kp J       &kp SEMI    &kp SLASH       &kp W       &kp G       &kp COMMA   &kp DOT      &kp K   ___
                    &sk LSHFT  &lt num TAB  &lt nav SPACE       &mt MEH RET  &lt_bspc sym 0  &sk RSHFT
                        >;
                };

                col_layer {
                        label = "Colmak";
//  ╭─────────────────────┬─────────────────────╮
//  │  Z   Y   U   A   Q  |  P   B   M   L   F  │
//  │  C   S   I   E   O  │  D   T   N   R   H  │
//  │  V   X   J   ;   /  |  W   G   ,   .   K  │
//  ╰───────╮ Sft Tab Spc │ Ret Bck Sft ╭───────╯
//          ╰─────────────┴─────────────╯
                        bindings = <
    ___    &kp Q      &kp W        &kp F       &kp P       &kp B           &kp J       &kp L       &kp U       &kp Y        &kp SEMI   ___
    ___    &kp A      &mt LCTRL R  &mt LALT S  &mt LGUI T  &kp G           &kp M       &mt RGUI N  &mt RALT E  &mt RCTRL I  &kp O      ___
    ___    &kp Z      &kp X        &kp C       &kp D       &kp V           &kp K       &kp H       &kp COMMA   &kp DOT      &kp SLASH  ___
                   &sk LSHFT  &lt num TAB  &lt nav SPACE       &mt MEH RET  &lt_bspc sym 0  &sk RSHFT
                        >;
                };

                qwert_layer {
                        label = "QWERTY";
//  ╭─────────────────────┬─────────────────────╮
//  │  Q   W   E   R   T  │  Y   U   I   O   P  |
//  |  A   S   D   F   G  |  H   J   K   L   ;  |
//  |  Z   X   C   V   B  |  N   M   ,   .   /  |
//  ╰───────╮ Sft Tab Spc │ Ret Bck Sft ╭───────╯
//          ╰─────────────┴─────────────╯
                        bindings = <
   ___  &kp Q    &kp W       &kp E       &kp R       &kp T         &kp Y  &kp U       &kp I       &kp O        &kp P      ___
   ___  &kp A    &mt LCTRL S &mt LALT D  &mt LGUI F  &kp G         &kp H  &mt RGUI J  &mt RALT K  &mt RCTRL L  &kp SEMI   ___
   ___  &kp Z    &kp X       &kp C       &kp V       &kp B         &kp N  &kp M       &kp COMMA   &kp DOT      &kp FSLH   ___
                      &sk LSHFT  &lt num TAB  &lt nav SPACE       &mt MEH RET  &lt_bspc sym 0  &sk RSHFT
                        >;
                };

                raise_layer {
                        label = "#+=";
//  ╭─────────────────────┬─────────────────────╮
//  │  !   @   #   $   %  │  ^   &   (   )   `  |
//  |     ~    `   '   "  |  -   _   [   ]   \  |
//  |          /   |   \  |  +   =   {   }   *  |
//  ╰───────╮ Sft Tab Spc │ Ret Bck Sft ╭───────╯
//          ╰─────────────┴─────────────╯
                        bindings = <
   ___  &kp EXCL   &kp AT        &kp HASH    &kp DLLR  &kp PRCNT     &kp CARET  &kp AMPS  &kp LPAR  &kp RPAR  &kp GRAVE  ___
   ___  ___        &kp TILDE     &kp GRAVE   &kp SQT   &kp DQT       &kp MINUS  &kp UNDER   &kp LBKT  &kp RBKT  &kp BSLH   ___
   ___  ___        ___           &kp FSLH    &kp PIPE  &kp BSLH      &kp PLUS  &kp EQUAL  &kp LBRC  &kp RBRC  &kp STAR   ___
                                                      ___  ___  ___     ___  ___  ___
                        >;
                };

                num_layer {
                        label = "123";
//  ╭─────────────────────┬─────────────────────╮
//  │  F1  F2  F3  F4     │  *   7   8   9   +  |
//  |  F5  F6  F7  F8     |  /   4   5   6   -  |
//  |  F9 F10 F11 F12  =  |  :   1   2   3   ., |
//  ╰───────╮ Sft Tab Spc │ Ret Bck  0  ╭───────╯
//          ╰─────────────┴─────────────╯
                        bindings = <
   ___  &kp F1        &kp F2        &kp F3       &kp F4       ___               &kp STAR   &kp N7       &kp N8       &kp N9        &kp PLUS         ___
   ___  &mt LSHFT F5  &mt LCTRL F6  &mt LALT F7  &mt LGUI F8  ___               &kp FSLH   &mt RGUI N4  &mt RALT N5  &mt RCTRL N6  &mt RSHFT MINUS  ___
   ___  &kp F9        &kp F10       &kp F11      &kp F12      &kp EQUAL         &kp COLON  &kp N1       &kp N2       &kp N3        &dot_comma       ___
                                                       ___  ___  ___              &kp RET   &bs_del   &mt RSHFT N0
                        >;
                };

                nav_layer {
                        label = "Media";
//  ╭─────────────────────┬─────────────────────╮
//  │ BT1 BT2 BT3 BT4 BT5 │ 🏡  ⤴️  ⤵️  🔚   |
//  | 🔆  🔊  ⏮️ ⏯️ ⏭️ | ⬅️  ⬇️  ⬆️  ➡️   |
//  | 🔅  🔉  🔇    OUT  |                    |
//  ╰───────╮ Sft Tab Spc │ Ret Bck Sft ╭───────╯
//          ╰─────────────┴─────────────╯
                        bindings = <
   ___  &bt BT_SEL 0        &bt BT_SEL 1        &bt BT_SEL 2      &bt BT_SEL 3    &bt BT_SEL 4        &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END    ___  ___
   ___  &mt LSHFT C_BRI_UP  &mt LCTRL C_VOL_UP  &mt LALT C_PREV   &mt LGUI C_PP   &kp C_NEXT          &kp LEFT   &kp DOWN       &kp UP       &kp RIGHT  ___  ___
   ___  &kp C_BRI_DN        &kp C_VOL_DN        &kp C_MUTE        ___             &out OUT_TOG        ___        ___            ___          ___        ___  ___
                                                                    ___  ___  ___     ___  ___  ___
                        >;
                };

                steno_layer {
                        label = "Steno";
//  ╭─────────────────────┬─────────────────────╮
//  │  Q   W   E   R   T  │  U   I   O   P   (  |
//  |  A   S   D   F   G  |  J   K   L   ;   '  |
//  |                     |                     |
//  ╰───────╮  -  C   V   │  N   M   =  ╭───────╯
//          ╰─────────────┴─────────────╯
                        bindings = <
   ___  &kp Q    &kp W    &kp E    &kp R    &kp T         &kp U    &kp I    &kp O    &kp P     &kp LBKT   ___
   ___  &kp A    &kp S    &kp D    &kp F    &kp G         &kp J    &kp K    &kp L    &kp SEMI  &kp SQT    ___
   ___  ___      ___      ___      ___      ___         ___      ___      ___      ___      ___         ___
                             &kp MINUS   &kp C    &kp V         &kp N   &kp M   &kp EQUAL
                        >;
                };

                met_layer {
                        label = "Teams";
                        bindings = <
    ___       ___                 ___                 ___               ___       ___              &kp RG(RS(K))   ___             ___             ___             ___       ___
    ___       &mt LSHFT C_BRI_UP  &mt LCTRL C_VOL_UP  ___               ___       ___              ___             ___             ___             ___             ___       ___
    ___       &kp C_BRI_DN        &kp C_VOL_DN        &kp C_MUTE        ___       ___              &kp RG(RS(O))   &kp RG(RS(M))   &kp RG(RS(E))   &kp RG(RS(H))   &tog met  ___
                                                                             ___  ___  ___     ___  ___  ___
                        >;
                };
        };
};
