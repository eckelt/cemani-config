/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "../nodefree/helper.h"
#include "../nodefree/keypos_def/keypos_42keys.h"
#include "../nodefree/international_chars/german.dtsi"

#define ___ &trans
#define HYP LS(LC(LA(LGUI)))

#define fun 1
#define sym 2
#define num 3
#define nav 4

&mt {
    tapping-term-ms = <220>;
    flavor = "tap-preferred";
};

// tap: backspace | shift + tap: delete | hold: num layer
ZMK_BEHAVIOR(bs_del_num, mod_morph,
    bindings = <&lt num BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

/ {

        behaviors {
            a_uml: a_uml {
                compatible = "zmk,behavior-mod-morph";
                label = "A umlaut";
                #binding-cells = <0>;
                bindings = <&kp A>, <&kp &de_ae>;
                mods = <(MOD_LALT|MOD_RALT)>;
            };
            o_uml: o_uml {
                compatible = "zmk,behavior-mod-morph";
                label = "O umlaut";
                #binding-cells = <0>;
                bindings = <&kp O>, <&kp &de_oe>;
                mods = <(MOD_LALT|MOD_RALT)>;
            };
            u_uml: u_uml {
                compatible = "zmk,behavior-mod-morph";
                label = "U umlaut";
                #binding-cells = <0>;
                bindings = <&kp U>, <&kp &de_ue>;
                mods = <(MOD_LALT|MOD_RALT)>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "Base";
// -----------------------------------------------------------------------------------------
// | ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// |     |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// |     |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |      |
//                   |     | LWR | SPC |   | ENT | RSE  |     |
                        bindings = <
   ___       &kp Q         &kp W       &kp E       &kp R       &kp T    &kp Y  &kp U       &kp I       &kp O       &kp P             &none
   &a_uml     &mt LSHIFT A  &mt LCTRL S &mt LALT D  &mt LGUI F  &kp G    &kp H  &mt RGUI J  &mt RALT K  &mt RCTRL L  &mt RSHIFT SEMI  &kp SQT
   &de_ae      &kp Z         &kp X       &kp C       &kp V       &kp B    &kp N  &kp M       &kp COMMA   &kp DOT      &kp FSLH         &none
                  &lt nav ESC  &lt fun TAB  &kp SPACE   &mt HYP RET  &bs_del_num  &mo sym
                        >;
                };

//                 umlauts_layer {
//                         label = "umlauts";
// // -----------------------------------------------------------------------------------------
// // | ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// // |     |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// // |     |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |      |
// //                   |     | LWR | SPC |   | ENT | RSE  |     |
//                         bindings = <
//    ___  ___         ___  ___  ___  ___     ___  &kp &de_ue  ___  &kp &de_oe  ___  ___ 
//    ___  &kp &de_ae  ___  ___  ___  ___     ___  ___         ___  ___         ___  ___
//    ___  ___         ___  ___  ___  ___     ___  ___         ___  ___         ___  ___
//                          ___  ___  ___     ___  ___         ___  
//                         >;
//                 };

                lower_layer {
                        label = "Fun";
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT | F11 | F12  |
// | SHFT | F1  | F2  | F3  | F4  | F5  |   | F6  | F7  | F8  | F9  | F10 | ESC  |
//                    |     |     | SPC |   | ENT |     |     |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0  &none
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp F11 &kp F12
   &kp LSHFT  &kp F1       &kp F2       &kp F3       &kp F4       &kp F5         &kp F6   &kp F7   &kp F8 &kp F9    &kp F10 &none
                                    ___     ___       &to 0      &kp RET  &trans   &to nav
                        >;
                };

                raise_layer {
                        label = "Sym";
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL | Br+ |Vol+ |Prev |Play |Next |   |  -  |  =  |  [  |  ]  |  \  |  ~   |
// | SHFT | Br- |Vol- |Mute |     |     |   |  _  |  +  |  {  |  }  | "|" |  `   |
//                    |     |     | SPC |   | ENT |     |     |
                        bindings = <
   &kp  TAB  &kp EXCL      &kp AT       &kp HASH    &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &kp C_BRI_UP  &kp K_VOL_UP &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp TILDE
   &kp LSHFT &kp C_BRI_DN  &kp K_VOL_DN &kp K_MUTE  &trans    &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp GRAVE
                                          &trans      &trans    &to 0   &kp RET   &trans    &to num
                        >;
                };

                num_layer {
                        label = "Num";
// -----------------------------------------------------------------------------------------
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |     |     |     |     |
// |      |     |     |     |     |     |   |     |     |     |     |     |     |
// |      |     |     |     |     |     |   |     |     |     |     |     |     |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans     &trans       &trans       &trans       &trans       &trans         &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
   &trans     &trans       &trans       &trans       &trans       &trans         &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
   &trans     &trans       &trans       &trans       &trans       &trans         &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                                          &trans       &trans       &to 0      &trans   &trans  &kp N0
                        >;
                };

                nav_layer {
                        label = "Nav";
// -----------------------------------------------------------------------------------------
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |     |     |     |     |
// |      |     |     |     |     |     |   |     |     |     |     |     |     |
// |      |     |     |     |     |     |   |     |     |     |     |     |     |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans     &trans     &trans    &trans     &trans    &trans
   &out OUT_TOG &trans       &trans       &trans       &trans       &trans         &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &trans    &trans
   &trans       &trans       &trans       &trans       &trans       &trans         &trans     &trans     &trans    &trans     &trans    &trans
                                          &sys_reset       &trans       &to 0     &trans     &trans     &sys_reset
                        >;
                };
        };
};
