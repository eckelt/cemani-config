/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define HOST_OS 2
// activate macOS-mode for helper script
#undef OS_UNICODE_LEAD
#undef OS_UNICODE_TRAIL
#define OS_UNICODE_LEAD &macro_press &kp LALT  // <- macOS compose sequence (must be activated in system preferences)
#define OS_UNICODE_TRAIL &macro_release &kp LALT  // <- Releasing Left-Alt terminates unicode input on macOns
#include "../nodefree/helper.h"
#include "../nodefree/keypos_def/keypos_42keys.h"
#include "../nodefree/international_chars/german.dtsi"

#define ___ &trans
#define HYP LS(LC(LA(LGUI)))

#define sym 1
#define num 2
#define nav 3


&mt {
    tapping-term-ms = <220>;
    flavor = "balanced";
};

// tap: backspace | shift + tap: delete
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

ZMK_BEHAVIOR(sft_a_ae, mod_morph,
    bindings = <&mt LSHIFT A>, <&de_ae>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

ZMK_COMBO(esc,  &kp ESC, LT4 LT3, ALL, 25)
ZMK_COMBO(power1, &kp C_POWER, LT0 LT1 LT2, ALL, 50)
ZMK_COMBO(power2, &kp K_POWER, RT0 RT1 RT2, ALL, 50)
// ZMK_COMBO(one, &kp N1, LT4 LM4, ALL, 50)
// ZMK_COMBO(two, &kp N2, LT3 LM3, ALL, 50)
// ZMK_COMBO(tre, &kp N3, LT2 LM2, ALL, 50)
// ZMK_COMBO(for, &kp N4, LT1 LM1, ALL, 50)
// ZMK_COMBO(fiv, &kp N5, LT0 LM0, ALL, 50)
// ZMK_COMBO(six, &kp N6, RT0 RM0, ALL, 50)
// ZMK_COMBO(svn, &kp N7, RT1 RM1, ALL, 50)
// ZMK_COMBO(egt, &kp N8, RT2 RM2, ALL, 50)
// ZMK_COMBO(nin, &kp N9, RT3 RM3, ALL, 50)
// ZMK_COMBO(zro, &kp N0, RT4 RM4, ALL, 50)
// ZMK_COMBO(fone, &kp F1, LM4 LB4, ALL, 50)
// ZMK_COMBO(ftwo, &kp F2, LM3 LB3, ALL, 50)
// ZMK_COMBO(ftre, &kp F3, LM2 LB2, ALL, 50)
// ZMK_COMBO(ffor, &kp F4, LM1 LB1, ALL, 50)
// ZMK_COMBO(ffiv, &kp F5, LM0 LB0, ALL, 50)
// ZMK_COMBO(fsix, &kp F6, RM0 RB0, ALL, 50)
// ZMK_COMBO(fsvn, &kp F7, RM1 RB1, ALL, 50)
// ZMK_COMBO(fegt, &kp F8, RM2 RB2, ALL, 50)
// ZMK_COMBO(fnin, &kp F9, RM3 RB3, ALL, 50)
// ZMK_COMBO(ften, &kp F10, RM4 RB4, ALL, 50)
ZMK_COMBO(rstl, &sys_reset, LH0 LH1 LH2, ALL, 50)
ZMK_COMBO(rstr, &sys_reset, RH0 RH1 RH2, ALL, 50)
ZMK_COMBO(rstr, &caps_word, LM4 LB4, ALL, 50)
ZMK_COMBO(rstr, &caps_word, LM4 RM4, ALL, 50)

/ {
    macros {
        auml: auml {
            label = "a umlaut";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp U>
                , <&macro_release &kp RALT>
                , <&macro_tap &kp A>
                ;
        };
        undo: undo {
            label = "undo";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp Z>
                , <&macro_release &kp RGUI>
                ;
        };
        cut: cut {
            label = "cut";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp X>
                , <&macro_release &kp RGUI>
                ;
        };
        copy: copy {
            label = "copy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp C>
                , <&macro_release &kp RGUI>
                ;
        };
        paste: paste {
            label = "paste";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp V>
                , <&macro_release &kp RGUI>
                ;
        };
        redo: redo {
            label = "redo";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp Y>
                , <&macro_release &kp RGUI>
                ;
        };
        ae_lc: ae_lc {
            label = "ae_lc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            // tap-ms = <10>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp U>
                , <&macro_release &kp RALT>
                , <&macro_tap &kp A>
                ;
        };
        ae_uc: ae_uc {
            label = "ae_uc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            // tap-ms = <10>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp U>
                , <&macro_release &kp RALT>
                , <&macro_tap &kp LS(A)>
                ;
        };
    };

        behaviors {
            mod_ae: mod_ae {
                compatible = "zmk,behavior-mod-morph";
                label = "Ae";
                #binding-cells = <0>;
                bindings = <&ae_lc>, <&ae_uc>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            a_uml: a_uml {
                compatible = "zmk,behavior-mod-morph";
                label = "A umlaut";
                #binding-cells = <0>;
                bindings = <&kp A>, <&mod_ae>;
                mods = <(MOD_LALT|MOD_RALT)>;
            };
            o_uml: o_uml {
                compatible = "zmk,behavior-mod-morph";
                label = "O umlaut";
                #binding-cells = <0>;
                bindings = <&kp O>, <&de_oe>;
                mods = <(MOD_LALT|MOD_RALT)>;
            };
            u_uml: u_uml {
                compatible = "zmk,behavior-mod-morph";
                label = "U umlaut";
                #binding-cells = <0>;
                bindings = <&kp U>, <&de_ue>;
                mods = <(MOD_LALT|MOD_RALT)>;
            };
            eur: eur {
                compatible = "zmk,behavior-mod-morph";
                label = "e eur";
                #binding-cells = <0>;
                bindings = <&kp E>, <&de_eur>;
                mods = <(MOD_LALT|MOD_RALT)>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "Base";
// -----------ESC---------------------------------------------------------------------------
// |    |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |    |
// |    |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    |
// |    |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |    |
//                   |     | LWR | SPC |   | ENT | RSE  |     |
                        bindings = <
   ___  &kp Q        &kp W       &kp E       &kp R       &kp T         &kp Y  &kp U       &kp I       &kp O        &kp P            ___
   ___  &mt LSHFT A  &mt LCTRL S &mt LALT D  &mt LGUI F  &kp G         &kp H  &mt RGUI J  &mt RALT K  &mt RCTRL L  &mt RSHIFT SEMI  ___
   ___  &kp Z        &kp X       &kp C       &kp V       &kp B         &kp N  &kp M       &kp COMMA   &kp DOT      &kp FSLH         ___
                             &lt num ESC  &lt nav TAB  &kp SPACE       &mt HYP RET  &bs_del  &mo sym
                        >;
                };

                raise_layer {
                        label = "Sym";
// -----------------------------------------------------------------------------------------
// |    |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  (  |  )  |  `  |    |
// |    | Br+ |Vol+ |Prev |Play |Next |   |  '  |  "  |  [  |  ]  |  \  |    |
// |    | Br- |Vol- |Mute |     |     |   |  _  |  *  |  {  |  }  | "|" |    |
//                    |     |     | SPC |   | ENT |     |     |
                        bindings = <
   ___  &kp EXCL      &kp AT        &kp HASH    &kp DLLR  &kp PRCNT     &kp CARET  &kp AMPS  &kp LPAR  &kp RPAR  &kp GRAVE  ___
   ___  ___           ___           &kp GRAVE   &kp SQT   &kp DQT       &kp MINUS  &kp UNDER   &kp LBKT  &kp RBKT  &kp BSLH   ___
   ___  ___           ___           &kp FSLH    &kp PIPE  &kp BSLH      &kp TILDE  &kp STAR  &kp LBRC  &kp RBRC  &kp PIPE   ___
                                                      ___  ___  ___     ___  ___  ___
                        >;
                };

                num_layer {
                        label = "NumPad";
// -----------------------------------------------------------------------------------------
// |    \ F1 | F2  | F3  | F4  |    |     |  *  |  7  |  8  |  9  |  +  |    |
// |    | F5 | F6  | F7  | F8  |    |     |  /  |  4  |  5  |  6  |  -  |    |
// |    | F9 | F10 | F11 | F12 |    |     |  :  |  1  |  2  |  3  |  =  |    |
//                 |     |     |     |   |  .  |   ,  |  0  |
                        bindings = <
   ___  &kp F1        &kp F2        &kp F3       &kp F4       ___      &kp STAR   &kp N7       &kp N8       &kp N9        &kp PLUS         ___
   ___  &mt LSHFT F5  &mt LCTRL F6  &mt LALT F7  &mt LGUI F8  ___      &kp FSLH   &mt RGUI N4  &mt RALT N5  &mt RCTRL N6  &mt RSHFT MINUS  ___
   ___  &kp F9        &kp F10       &kp F11      &kp F12      ___      &kp COLON  &kp N1       &kp N2       &kp N3        &kp EQUAL        ___
                                            &kp &mod_ae  ___  ___      &kp COMMA  &kp DOT  &kp N0
                        >;
                };

                nav_layer {
                        label = "Nav";
// -----------------------------------------------------------------------------------------
// |      | BT1 | BT2 | BT3 | BT4 | BT5 |   |home |pg dn|pg up| end |     |     |
// |      |     |     |     |     |BTCLR|   |  <  |  v  |  ^  |  >  |     |     |
// |      |undo | cut |copy |oaste|redo |   |     |     |     |     |     |     |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   ___  &bt BT_SEL 0        &bt BT_SEL 1        &bt BT_SEL 2      &bt BT_SEL 3    &bt BT_CLR        &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END    ___  ___
   ___  &mt LSHFT C_BRI_UP  &mt LCTRL K_VOL_UP  &mt LALT C_PREV   &mt LGUI C_PP   &kp C_NEXT        &kp LEFT   &kp DOWN       &kp UP       &kp RIGHT  ___  ___
   ___  &kp C_BRI_DN        &kp K_VOL_DN        &kp K_MUTE        ___             &out OUT_TOG      ___        ___            ___          ___        ___  ___
                                                            ___  ___  ___     ___  ___  ___
                        >;
                };

        };
};
